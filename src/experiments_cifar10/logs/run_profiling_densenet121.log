################ Profiling started at 20240125-063411 ################.
Provided parameters: profile(function=Conv2dRFFTFunction timestamp=20240125-063411 batch_size=8 profile_name=DenseNet121_CIFAR10_Conv2dRFFTFunction num_classes=10 skip_first=0 wait=4 warmup=4 active=4 repeat=1)
Original model architecture is DenseNet(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (denseblock1): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition1): _Transition(
      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock2): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition2): _Transition(
      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock3): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition3): _Transition(
      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock4): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (classifier): Linear(in_features=1024, out_features=1000, bias=True)
)
Adopted model architecture is DenseNet(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (denseblock1): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition1): _Transition(
      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock2): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition2): _Transition(
      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock3): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition3): _Transition(
      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock4): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (classifier): Linear(in_features=1024, out_features=10, bias=True)
)
(0) parameter.requires_grad = True
(1) parameter.requires_grad = True
(2) parameter.requires_grad = True
(3) parameter.requires_grad = True
(4) parameter.requires_grad = True
(5) parameter.requires_grad = True
(6) parameter.requires_grad = True
(7) parameter.requires_grad = True
(8) parameter.requires_grad = True
(9) parameter.requires_grad = True
(10) parameter.requires_grad = True
(11) parameter.requires_grad = True
(12) parameter.requires_grad = True
(13) parameter.requires_grad = True
(14) parameter.requires_grad = True
(15) parameter.requires_grad = True
(16) parameter.requires_grad = True
(17) parameter.requires_grad = True
(18) parameter.requires_grad = True
(19) parameter.requires_grad = True
(20) parameter.requires_grad = True
(21) parameter.requires_grad = True
(22) parameter.requires_grad = True
(23) parameter.requires_grad = True
(24) parameter.requires_grad = True
(25) parameter.requires_grad = True
(26) parameter.requires_grad = True
(27) parameter.requires_grad = True
(28) parameter.requires_grad = True
(29) parameter.requires_grad = True
(30) parameter.requires_grad = True
(31) parameter.requires_grad = True
(32) parameter.requires_grad = True
(33) parameter.requires_grad = True
(34) parameter.requires_grad = True
(35) parameter.requires_grad = True
(36) parameter.requires_grad = True
(37) parameter.requires_grad = True
(38) parameter.requires_grad = True
(39) parameter.requires_grad = True
(40) parameter.requires_grad = True
(41) parameter.requires_grad = True
(42) parameter.requires_grad = True
(43) parameter.requires_grad = True
(44) parameter.requires_grad = True
(45) parameter.requires_grad = True
(46) parameter.requires_grad = True
(47) parameter.requires_grad = True
(48) parameter.requires_grad = True
(49) parameter.requires_grad = True
(50) parameter.requires_grad = True
(51) parameter.requires_grad = True
(52) parameter.requires_grad = True
(53) parameter.requires_grad = True
(54) parameter.requires_grad = True
(55) parameter.requires_grad = True
(56) parameter.requires_grad = True
(57) parameter.requires_grad = True
(58) parameter.requires_grad = True
(59) parameter.requires_grad = True
(60) parameter.requires_grad = True
(61) parameter.requires_grad = True
(62) parameter.requires_grad = True
(63) parameter.requires_grad = True
(64) parameter.requires_grad = True
(65) parameter.requires_grad = True
(66) parameter.requires_grad = True
(67) parameter.requires_grad = True
(68) parameter.requires_grad = True
(69) parameter.requires_grad = True
(70) parameter.requires_grad = True
(71) parameter.requires_grad = True
(72) parameter.requires_grad = True
(73) parameter.requires_grad = True
(74) parameter.requires_grad = True
(75) parameter.requires_grad = True
(76) parameter.requires_grad = True
(77) parameter.requires_grad = True
(78) parameter.requires_grad = True
(79) parameter.requires_grad = True
(80) parameter.requires_grad = True
(81) parameter.requires_grad = True
(82) parameter.requires_grad = True
(83) parameter.requires_grad = True
(84) parameter.requires_grad = True
(85) parameter.requires_grad = True
(86) parameter.requires_grad = True
(87) parameter.requires_grad = True
(88) parameter.requires_grad = True
(89) parameter.requires_grad = True
(90) parameter.requires_grad = True
(91) parameter.requires_grad = True
(92) parameter.requires_grad = True
(93) parameter.requires_grad = True
(94) parameter.requires_grad = True
(95) parameter.requires_grad = True
(96) parameter.requires_grad = True
(97) parameter.requires_grad = True
(98) parameter.requires_grad = True
(99) parameter.requires_grad = True
(100) parameter.requires_grad = True
(101) parameter.requires_grad = True
(102) parameter.requires_grad = True
(103) parameter.requires_grad = True
(104) parameter.requires_grad = True
(105) parameter.requires_grad = True
(106) parameter.requires_grad = True
(107) parameter.requires_grad = True
(108) parameter.requires_grad = True
(109) parameter.requires_grad = True
(110) parameter.requires_grad = True
(111) parameter.requires_grad = True
(112) parameter.requires_grad = True
(113) parameter.requires_grad = True
(114) parameter.requires_grad = True
(115) parameter.requires_grad = True
(116) parameter.requires_grad = True
(117) parameter.requires_grad = True
(118) parameter.requires_grad = True
(119) parameter.requires_grad = True
(120) parameter.requires_grad = True
(121) parameter.requires_grad = True
(122) parameter.requires_grad = True
(123) parameter.requires_grad = True
(124) parameter.requires_grad = True
(125) parameter.requires_grad = True
(126) parameter.requires_grad = True
(127) parameter.requires_grad = True
(128) parameter.requires_grad = True
(129) parameter.requires_grad = True
(130) parameter.requires_grad = True
(131) parameter.requires_grad = True
(132) parameter.requires_grad = True
(133) parameter.requires_grad = True
(134) parameter.requires_grad = True
(135) parameter.requires_grad = True
(136) parameter.requires_grad = True
(137) parameter.requires_grad = True
(138) parameter.requires_grad = True
(139) parameter.requires_grad = True
(140) parameter.requires_grad = True
(141) parameter.requires_grad = True
(142) parameter.requires_grad = True
(143) parameter.requires_grad = True
(144) parameter.requires_grad = True
(145) parameter.requires_grad = True
(146) parameter.requires_grad = True
(147) parameter.requires_grad = True
(148) parameter.requires_grad = True
(149) parameter.requires_grad = True
(150) parameter.requires_grad = True
(151) parameter.requires_grad = True
(152) parameter.requires_grad = True
(153) parameter.requires_grad = True
(154) parameter.requires_grad = True
(155) parameter.requires_grad = True
(156) parameter.requires_grad = True
(157) parameter.requires_grad = True
(158) parameter.requires_grad = True
(159) parameter.requires_grad = True
(160) parameter.requires_grad = True
(161) parameter.requires_grad = True
(162) parameter.requires_grad = True
(163) parameter.requires_grad = True
(164) parameter.requires_grad = True
(165) parameter.requires_grad = True
(166) parameter.requires_grad = True
(167) parameter.requires_grad = True
(168) parameter.requires_grad = True
(169) parameter.requires_grad = True
(170) parameter.requires_grad = True
(171) parameter.requires_grad = True
(172) parameter.requires_grad = True
(173) parameter.requires_grad = True
(174) parameter.requires_grad = True
(175) parameter.requires_grad = True
(176) parameter.requires_grad = True
(177) parameter.requires_grad = True
(178) parameter.requires_grad = True
(179) parameter.requires_grad = True
(180) parameter.requires_grad = True
(181) parameter.requires_grad = True
(182) parameter.requires_grad = True
(183) parameter.requires_grad = True
(184) parameter.requires_grad = True
(185) parameter.requires_grad = True
(186) parameter.requires_grad = True
(187) parameter.requires_grad = True
(188) parameter.requires_grad = True
(189) parameter.requires_grad = True
(190) parameter.requires_grad = True
(191) parameter.requires_grad = True
(192) parameter.requires_grad = True
(193) parameter.requires_grad = True
(194) parameter.requires_grad = True
(195) parameter.requires_grad = True
(196) parameter.requires_grad = True
(197) parameter.requires_grad = True
(198) parameter.requires_grad = True
(199) parameter.requires_grad = True
(200) parameter.requires_grad = True
(201) parameter.requires_grad = True
(202) parameter.requires_grad = True
(203) parameter.requires_grad = True
(204) parameter.requires_grad = True
(205) parameter.requires_grad = True
(206) parameter.requires_grad = True
(207) parameter.requires_grad = True
(208) parameter.requires_grad = True
(209) parameter.requires_grad = True
(210) parameter.requires_grad = True
(211) parameter.requires_grad = True
(212) parameter.requires_grad = True
(213) parameter.requires_grad = True
(214) parameter.requires_grad = True
(215) parameter.requires_grad = True
(216) parameter.requires_grad = True
(217) parameter.requires_grad = True
(218) parameter.requires_grad = True
(219) parameter.requires_grad = True
(220) parameter.requires_grad = True
(221) parameter.requires_grad = True
(222) parameter.requires_grad = True
(223) parameter.requires_grad = True
(224) parameter.requires_grad = True
(225) parameter.requires_grad = True
(226) parameter.requires_grad = True
(227) parameter.requires_grad = True
(228) parameter.requires_grad = True
(229) parameter.requires_grad = True
(230) parameter.requires_grad = True
(231) parameter.requires_grad = True
(232) parameter.requires_grad = True
(233) parameter.requires_grad = True
(234) parameter.requires_grad = True
(235) parameter.requires_grad = True
(236) parameter.requires_grad = True
(237) parameter.requires_grad = True
(238) parameter.requires_grad = True
(239) parameter.requires_grad = True
(240) parameter.requires_grad = True
(241) parameter.requires_grad = True
(242) parameter.requires_grad = True
(243) parameter.requires_grad = True
(244) parameter.requires_grad = True
(245) parameter.requires_grad = True
(246) parameter.requires_grad = True
(247) parameter.requires_grad = True
(248) parameter.requires_grad = True
(249) parameter.requires_grad = True
(250) parameter.requires_grad = True
(251) parameter.requires_grad = True
(252) parameter.requires_grad = True
(253) parameter.requires_grad = True
(254) parameter.requires_grad = True
(255) parameter.requires_grad = True
(256) parameter.requires_grad = True
(257) parameter.requires_grad = True
(258) parameter.requires_grad = True
(259) parameter.requires_grad = True
(260) parameter.requires_grad = True
(261) parameter.requires_grad = True
(262) parameter.requires_grad = True
(263) parameter.requires_grad = True
(264) parameter.requires_grad = True
(265) parameter.requires_grad = True
(266) parameter.requires_grad = True
(267) parameter.requires_grad = True
(268) parameter.requires_grad = True
(269) parameter.requires_grad = True
(270) parameter.requires_grad = True
(271) parameter.requires_grad = True
(272) parameter.requires_grad = True
(273) parameter.requires_grad = True
(274) parameter.requires_grad = True
(275) parameter.requires_grad = True
(276) parameter.requires_grad = True
(277) parameter.requires_grad = True
(278) parameter.requires_grad = True
(279) parameter.requires_grad = True
(280) parameter.requires_grad = True
(281) parameter.requires_grad = True
(282) parameter.requires_grad = True
(283) parameter.requires_grad = True
(284) parameter.requires_grad = True
(285) parameter.requires_grad = True
(286) parameter.requires_grad = True
(287) parameter.requires_grad = True
(288) parameter.requires_grad = True
(289) parameter.requires_grad = True
(290) parameter.requires_grad = True
(291) parameter.requires_grad = True
(292) parameter.requires_grad = True
(293) parameter.requires_grad = True
(294) parameter.requires_grad = True
(295) parameter.requires_grad = True
(296) parameter.requires_grad = True
(297) parameter.requires_grad = True
(298) parameter.requires_grad = True
(299) parameter.requires_grad = True
(300) parameter.requires_grad = True
(301) parameter.requires_grad = True
(302) parameter.requires_grad = True
(303) parameter.requires_grad = True
(304) parameter.requires_grad = True
(305) parameter.requires_grad = True
(306) parameter.requires_grad = True
(307) parameter.requires_grad = True
(308) parameter.requires_grad = True
(309) parameter.requires_grad = True
(310) parameter.requires_grad = True
(311) parameter.requires_grad = True
(312) parameter.requires_grad = True
(313) parameter.requires_grad = True
(314) parameter.requires_grad = True
(315) parameter.requires_grad = True
(316) parameter.requires_grad = True
(317) parameter.requires_grad = True
(318) parameter.requires_grad = True
(319) parameter.requires_grad = True
(320) parameter.requires_grad = True
(321) parameter.requires_grad = True
(322) parameter.requires_grad = True
(323) parameter.requires_grad = True
(324) parameter.requires_grad = True
(325) parameter.requires_grad = True
(326) parameter.requires_grad = True
(327) parameter.requires_grad = True
(328) parameter.requires_grad = True
(329) parameter.requires_grad = True
(330) parameter.requires_grad = True
(331) parameter.requires_grad = True
(332) parameter.requires_grad = True
(333) parameter.requires_grad = True
(334) parameter.requires_grad = True
(335) parameter.requires_grad = True
(336) parameter.requires_grad = True
(337) parameter.requires_grad = True
(338) parameter.requires_grad = True
(339) parameter.requires_grad = True
(340) parameter.requires_grad = True
(341) parameter.requires_grad = True
(342) parameter.requires_grad = True
(343) parameter.requires_grad = True
(344) parameter.requires_grad = True
(345) parameter.requires_grad = True
(346) parameter.requires_grad = True
(347) parameter.requires_grad = True
(348) parameter.requires_grad = True
(349) parameter.requires_grad = True
(350) parameter.requires_grad = True
(351) parameter.requires_grad = True
(352) parameter.requires_grad = True
(353) parameter.requires_grad = True
(354) parameter.requires_grad = True
(355) parameter.requires_grad = True
(356) parameter.requires_grad = True
(357) parameter.requires_grad = True
(358) parameter.requires_grad = True
(359) parameter.requires_grad = True
(360) parameter.requires_grad = True
(361) parameter.requires_grad = True
(362) parameter.requires_grad = True
(363) parameter.requires_grad = True
Profiling Model DenseNet121_CIFAR10_Conv2dRFFTFunction.
################################################################################
Running Conv2dRFFTFunction step=0/12 (0.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=1/12 (8.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=2/12 (16.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=3/12 (25.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=4/12 (33.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=5/12 (41.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=6/12 (50.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=7/12 (58.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=8/12 (66.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=9/12 (75.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=10/12 (83.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=11/12 (91.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Profile trace saved to /home/edreis/Code/eduardo4jesus/Phd-Research/paper2/src/experiments/.profiles/DenseNet121_CIFAR10_Conv2dRFFTFunction_date-20240125-063411.json.
Provided parameters: profile(function=Conv2dRFFTPhasorFunction timestamp=20240125-063411 batch_size=8 profile_name=DenseNet121_CIFAR10_Conv2dRFFTPhasorFunction num_classes=10 skip_first=0 wait=4 warmup=4 active=4 repeat=1)
Original model architecture is DenseNet(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (denseblock1): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition1): _Transition(
      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock2): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition2): _Transition(
      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock3): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition3): _Transition(
      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock4): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (classifier): Linear(in_features=1024, out_features=1000, bias=True)
)
Adopted model architecture is DenseNet(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (denseblock1): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition1): _Transition(
      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock2): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition2): _Transition(
      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock3): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition3): _Transition(
      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock4): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (classifier): Linear(in_features=1024, out_features=10, bias=True)
)
(0) parameter.requires_grad = True
(1) parameter.requires_grad = True
(2) parameter.requires_grad = True
(3) parameter.requires_grad = True
(4) parameter.requires_grad = True
(5) parameter.requires_grad = True
(6) parameter.requires_grad = True
(7) parameter.requires_grad = True
(8) parameter.requires_grad = True
(9) parameter.requires_grad = True
(10) parameter.requires_grad = True
(11) parameter.requires_grad = True
(12) parameter.requires_grad = True
(13) parameter.requires_grad = True
(14) parameter.requires_grad = True
(15) parameter.requires_grad = True
(16) parameter.requires_grad = True
(17) parameter.requires_grad = True
(18) parameter.requires_grad = True
(19) parameter.requires_grad = True
(20) parameter.requires_grad = True
(21) parameter.requires_grad = True
(22) parameter.requires_grad = True
(23) parameter.requires_grad = True
(24) parameter.requires_grad = True
(25) parameter.requires_grad = True
(26) parameter.requires_grad = True
(27) parameter.requires_grad = True
(28) parameter.requires_grad = True
(29) parameter.requires_grad = True
(30) parameter.requires_grad = True
(31) parameter.requires_grad = True
(32) parameter.requires_grad = True
(33) parameter.requires_grad = True
(34) parameter.requires_grad = True
(35) parameter.requires_grad = True
(36) parameter.requires_grad = True
(37) parameter.requires_grad = True
(38) parameter.requires_grad = True
(39) parameter.requires_grad = True
(40) parameter.requires_grad = True
(41) parameter.requires_grad = True
(42) parameter.requires_grad = True
(43) parameter.requires_grad = True
(44) parameter.requires_grad = True
(45) parameter.requires_grad = True
(46) parameter.requires_grad = True
(47) parameter.requires_grad = True
(48) parameter.requires_grad = True
(49) parameter.requires_grad = True
(50) parameter.requires_grad = True
(51) parameter.requires_grad = True
(52) parameter.requires_grad = True
(53) parameter.requires_grad = True
(54) parameter.requires_grad = True
(55) parameter.requires_grad = True
(56) parameter.requires_grad = True
(57) parameter.requires_grad = True
(58) parameter.requires_grad = True
(59) parameter.requires_grad = True
(60) parameter.requires_grad = True
(61) parameter.requires_grad = True
(62) parameter.requires_grad = True
(63) parameter.requires_grad = True
(64) parameter.requires_grad = True
(65) parameter.requires_grad = True
(66) parameter.requires_grad = True
(67) parameter.requires_grad = True
(68) parameter.requires_grad = True
(69) parameter.requires_grad = True
(70) parameter.requires_grad = True
(71) parameter.requires_grad = True
(72) parameter.requires_grad = True
(73) parameter.requires_grad = True
(74) parameter.requires_grad = True
(75) parameter.requires_grad = True
(76) parameter.requires_grad = True
(77) parameter.requires_grad = True
(78) parameter.requires_grad = True
(79) parameter.requires_grad = True
(80) parameter.requires_grad = True
(81) parameter.requires_grad = True
(82) parameter.requires_grad = True
(83) parameter.requires_grad = True
(84) parameter.requires_grad = True
(85) parameter.requires_grad = True
(86) parameter.requires_grad = True
(87) parameter.requires_grad = True
(88) parameter.requires_grad = True
(89) parameter.requires_grad = True
(90) parameter.requires_grad = True
(91) parameter.requires_grad = True
(92) parameter.requires_grad = True
(93) parameter.requires_grad = True
(94) parameter.requires_grad = True
(95) parameter.requires_grad = True
(96) parameter.requires_grad = True
(97) parameter.requires_grad = True
(98) parameter.requires_grad = True
(99) parameter.requires_grad = True
(100) parameter.requires_grad = True
(101) parameter.requires_grad = True
(102) parameter.requires_grad = True
(103) parameter.requires_grad = True
(104) parameter.requires_grad = True
(105) parameter.requires_grad = True
(106) parameter.requires_grad = True
(107) parameter.requires_grad = True
(108) parameter.requires_grad = True
(109) parameter.requires_grad = True
(110) parameter.requires_grad = True
(111) parameter.requires_grad = True
(112) parameter.requires_grad = True
(113) parameter.requires_grad = True
(114) parameter.requires_grad = True
(115) parameter.requires_grad = True
(116) parameter.requires_grad = True
(117) parameter.requires_grad = True
(118) parameter.requires_grad = True
(119) parameter.requires_grad = True
(120) parameter.requires_grad = True
(121) parameter.requires_grad = True
(122) parameter.requires_grad = True
(123) parameter.requires_grad = True
(124) parameter.requires_grad = True
(125) parameter.requires_grad = True
(126) parameter.requires_grad = True
(127) parameter.requires_grad = True
(128) parameter.requires_grad = True
(129) parameter.requires_grad = True
(130) parameter.requires_grad = True
(131) parameter.requires_grad = True
(132) parameter.requires_grad = True
(133) parameter.requires_grad = True
(134) parameter.requires_grad = True
(135) parameter.requires_grad = True
(136) parameter.requires_grad = True
(137) parameter.requires_grad = True
(138) parameter.requires_grad = True
(139) parameter.requires_grad = True
(140) parameter.requires_grad = True
(141) parameter.requires_grad = True
(142) parameter.requires_grad = True
(143) parameter.requires_grad = True
(144) parameter.requires_grad = True
(145) parameter.requires_grad = True
(146) parameter.requires_grad = True
(147) parameter.requires_grad = True
(148) parameter.requires_grad = True
(149) parameter.requires_grad = True
(150) parameter.requires_grad = True
(151) parameter.requires_grad = True
(152) parameter.requires_grad = True
(153) parameter.requires_grad = True
(154) parameter.requires_grad = True
(155) parameter.requires_grad = True
(156) parameter.requires_grad = True
(157) parameter.requires_grad = True
(158) parameter.requires_grad = True
(159) parameter.requires_grad = True
(160) parameter.requires_grad = True
(161) parameter.requires_grad = True
(162) parameter.requires_grad = True
(163) parameter.requires_grad = True
(164) parameter.requires_grad = True
(165) parameter.requires_grad = True
(166) parameter.requires_grad = True
(167) parameter.requires_grad = True
(168) parameter.requires_grad = True
(169) parameter.requires_grad = True
(170) parameter.requires_grad = True
(171) parameter.requires_grad = True
(172) parameter.requires_grad = True
(173) parameter.requires_grad = True
(174) parameter.requires_grad = True
(175) parameter.requires_grad = True
(176) parameter.requires_grad = True
(177) parameter.requires_grad = True
(178) parameter.requires_grad = True
(179) parameter.requires_grad = True
(180) parameter.requires_grad = True
(181) parameter.requires_grad = True
(182) parameter.requires_grad = True
(183) parameter.requires_grad = True
(184) parameter.requires_grad = True
(185) parameter.requires_grad = True
(186) parameter.requires_grad = True
(187) parameter.requires_grad = True
(188) parameter.requires_grad = True
(189) parameter.requires_grad = True
(190) parameter.requires_grad = True
(191) parameter.requires_grad = True
(192) parameter.requires_grad = True
(193) parameter.requires_grad = True
(194) parameter.requires_grad = True
(195) parameter.requires_grad = True
(196) parameter.requires_grad = True
(197) parameter.requires_grad = True
(198) parameter.requires_grad = True
(199) parameter.requires_grad = True
(200) parameter.requires_grad = True
(201) parameter.requires_grad = True
(202) parameter.requires_grad = True
(203) parameter.requires_grad = True
(204) parameter.requires_grad = True
(205) parameter.requires_grad = True
(206) parameter.requires_grad = True
(207) parameter.requires_grad = True
(208) parameter.requires_grad = True
(209) parameter.requires_grad = True
(210) parameter.requires_grad = True
(211) parameter.requires_grad = True
(212) parameter.requires_grad = True
(213) parameter.requires_grad = True
(214) parameter.requires_grad = True
(215) parameter.requires_grad = True
(216) parameter.requires_grad = True
(217) parameter.requires_grad = True
(218) parameter.requires_grad = True
(219) parameter.requires_grad = True
(220) parameter.requires_grad = True
(221) parameter.requires_grad = True
(222) parameter.requires_grad = True
(223) parameter.requires_grad = True
(224) parameter.requires_grad = True
(225) parameter.requires_grad = True
(226) parameter.requires_grad = True
(227) parameter.requires_grad = True
(228) parameter.requires_grad = True
(229) parameter.requires_grad = True
(230) parameter.requires_grad = True
(231) parameter.requires_grad = True
(232) parameter.requires_grad = True
(233) parameter.requires_grad = True
(234) parameter.requires_grad = True
(235) parameter.requires_grad = True
(236) parameter.requires_grad = True
(237) parameter.requires_grad = True
(238) parameter.requires_grad = True
(239) parameter.requires_grad = True
(240) parameter.requires_grad = True
(241) parameter.requires_grad = True
(242) parameter.requires_grad = True
(243) parameter.requires_grad = True
(244) parameter.requires_grad = True
(245) parameter.requires_grad = True
(246) parameter.requires_grad = True
(247) parameter.requires_grad = True
(248) parameter.requires_grad = True
(249) parameter.requires_grad = True
(250) parameter.requires_grad = True
(251) parameter.requires_grad = True
(252) parameter.requires_grad = True
(253) parameter.requires_grad = True
(254) parameter.requires_grad = True
(255) parameter.requires_grad = True
(256) parameter.requires_grad = True
(257) parameter.requires_grad = True
(258) parameter.requires_grad = True
(259) parameter.requires_grad = True
(260) parameter.requires_grad = True
(261) parameter.requires_grad = True
(262) parameter.requires_grad = True
(263) parameter.requires_grad = True
(264) parameter.requires_grad = True
(265) parameter.requires_grad = True
(266) parameter.requires_grad = True
(267) parameter.requires_grad = True
(268) parameter.requires_grad = True
(269) parameter.requires_grad = True
(270) parameter.requires_grad = True
(271) parameter.requires_grad = True
(272) parameter.requires_grad = True
(273) parameter.requires_grad = True
(274) parameter.requires_grad = True
(275) parameter.requires_grad = True
(276) parameter.requires_grad = True
(277) parameter.requires_grad = True
(278) parameter.requires_grad = True
(279) parameter.requires_grad = True
(280) parameter.requires_grad = True
(281) parameter.requires_grad = True
(282) parameter.requires_grad = True
(283) parameter.requires_grad = True
(284) parameter.requires_grad = True
(285) parameter.requires_grad = True
(286) parameter.requires_grad = True
(287) parameter.requires_grad = True
(288) parameter.requires_grad = True
(289) parameter.requires_grad = True
(290) parameter.requires_grad = True
(291) parameter.requires_grad = True
(292) parameter.requires_grad = True
(293) parameter.requires_grad = True
(294) parameter.requires_grad = True
(295) parameter.requires_grad = True
(296) parameter.requires_grad = True
(297) parameter.requires_grad = True
(298) parameter.requires_grad = True
(299) parameter.requires_grad = True
(300) parameter.requires_grad = True
(301) parameter.requires_grad = True
(302) parameter.requires_grad = True
(303) parameter.requires_grad = True
(304) parameter.requires_grad = True
(305) parameter.requires_grad = True
(306) parameter.requires_grad = True
(307) parameter.requires_grad = True
(308) parameter.requires_grad = True
(309) parameter.requires_grad = True
(310) parameter.requires_grad = True
(311) parameter.requires_grad = True
(312) parameter.requires_grad = True
(313) parameter.requires_grad = True
(314) parameter.requires_grad = True
(315) parameter.requires_grad = True
(316) parameter.requires_grad = True
(317) parameter.requires_grad = True
(318) parameter.requires_grad = True
(319) parameter.requires_grad = True
(320) parameter.requires_grad = True
(321) parameter.requires_grad = True
(322) parameter.requires_grad = True
(323) parameter.requires_grad = True
(324) parameter.requires_grad = True
(325) parameter.requires_grad = True
(326) parameter.requires_grad = True
(327) parameter.requires_grad = True
(328) parameter.requires_grad = True
(329) parameter.requires_grad = True
(330) parameter.requires_grad = True
(331) parameter.requires_grad = True
(332) parameter.requires_grad = True
(333) parameter.requires_grad = True
(334) parameter.requires_grad = True
(335) parameter.requires_grad = True
(336) parameter.requires_grad = True
(337) parameter.requires_grad = True
(338) parameter.requires_grad = True
(339) parameter.requires_grad = True
(340) parameter.requires_grad = True
(341) parameter.requires_grad = True
(342) parameter.requires_grad = True
(343) parameter.requires_grad = True
(344) parameter.requires_grad = True
(345) parameter.requires_grad = True
(346) parameter.requires_grad = True
(347) parameter.requires_grad = True
(348) parameter.requires_grad = True
(349) parameter.requires_grad = True
(350) parameter.requires_grad = True
(351) parameter.requires_grad = True
(352) parameter.requires_grad = True
(353) parameter.requires_grad = True
(354) parameter.requires_grad = True
(355) parameter.requires_grad = True
(356) parameter.requires_grad = True
(357) parameter.requires_grad = True
(358) parameter.requires_grad = True
(359) parameter.requires_grad = True
(360) parameter.requires_grad = True
(361) parameter.requires_grad = True
(362) parameter.requires_grad = True
(363) parameter.requires_grad = True
Profiling Model DenseNet121_CIFAR10_Conv2dRFFTPhasorFunction.
################################################################################
Running Conv2dRFFTPhasorFunction step=0/12 (0.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=1/12 (8.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=2/12 (16.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=3/12 (25.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=4/12 (33.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=5/12 (41.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=6/12 (50.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=7/12 (58.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=8/12 (66.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=9/12 (75.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=10/12 (83.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=11/12 (91.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([8, 3, 224, 224]) weights_shape=torch.Size([64, 3, 7, 7]) bias_shape=None stride=(2, 2) padding=(3, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 64, 56, 56]) weights_shape=torch.Size([128, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 96, 56, 56]) weights_shape=torch.Size([128, 96, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 56, 56]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 56, 56]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 56, 56]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 56, 56]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 56, 56]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([128, 128, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 160, 28, 28]) weights_shape=torch.Size([128, 160, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 192, 28, 28]) weights_shape=torch.Size([128, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 224, 28, 28]) weights_shape=torch.Size([128, 224, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 28, 28]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 28, 28]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 28, 28]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 28, 28]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 28, 28]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 28, 28]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 28, 28]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 28, 28]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 28, 28]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 28, 28]) weights_shape=torch.Size([256, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 256, 14, 14]) weights_shape=torch.Size([128, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 288, 14, 14]) weights_shape=torch.Size([128, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 320, 14, 14]) weights_shape=torch.Size([128, 320, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 352, 14, 14]) weights_shape=torch.Size([128, 352, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 384, 14, 14]) weights_shape=torch.Size([128, 384, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 416, 14, 14]) weights_shape=torch.Size([128, 416, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 448, 14, 14]) weights_shape=torch.Size([128, 448, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 480, 14, 14]) weights_shape=torch.Size([128, 480, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 14, 14]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 14, 14]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 14, 14]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 14, 14]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 14, 14]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 14, 14]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 14, 14]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 14, 14]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 14, 14]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 14, 14]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 14, 14]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 14, 14]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 14, 14]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 14, 14]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 14, 14]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 14, 14]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 14, 14]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 1024, 14, 14]) weights_shape=torch.Size([512, 1024, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 512, 7, 7]) weights_shape=torch.Size([128, 512, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 544, 7, 7]) weights_shape=torch.Size([128, 544, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 576, 7, 7]) weights_shape=torch.Size([128, 576, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 608, 7, 7]) weights_shape=torch.Size([128, 608, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 640, 7, 7]) weights_shape=torch.Size([128, 640, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 672, 7, 7]) weights_shape=torch.Size([128, 672, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 704, 7, 7]) weights_shape=torch.Size([128, 704, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 736, 7, 7]) weights_shape=torch.Size([128, 736, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 768, 7, 7]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 800, 7, 7]) weights_shape=torch.Size([128, 800, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 832, 7, 7]) weights_shape=torch.Size([128, 832, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 864, 7, 7]) weights_shape=torch.Size([128, 864, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 896, 7, 7]) weights_shape=torch.Size([128, 896, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 928, 7, 7]) weights_shape=torch.Size([128, 928, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 960, 7, 7]) weights_shape=torch.Size([128, 960, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 992, 7, 7]) weights_shape=torch.Size([128, 992, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([8, 128, 7, 7]) weights_shape=torch.Size([32, 128, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
################################################################################
Profile trace saved to /home/edreis/Code/eduardo4jesus/Phd-Research/paper2/src/experiments/.profiles/DenseNet121_CIFAR10_Conv2dRFFTPhasorFunction_date-20240125-063411.json.
Profile saved to /home/edreis/Code/eduardo4jesus/Phd-Research/paper2/src/experiments/.profiles/DenseNet121_CIFAR10_Conv2dRFFTPhasorFunction_date-20240125-063411.pt.
################ Profiling ended at 20240125-064024 ################.
