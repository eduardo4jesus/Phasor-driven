[0mProvided parameters: main(total_num_epochs=4,freeze_features_epochs=2, batch_size=64)[0m
[0mModel orginal architecture is EfficientNet(
  (features): Sequential(
    (0): Conv2dNormActivation(
      (0): Conv2d(3, 40, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): SiLU(inplace=True)
    )
    (1): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(40, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=40, bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(40, 10, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(10, 40, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(40, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.0, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(24, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=24, bias=False)
            (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(24, 6, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(6, 24, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(24, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.007692307692307693, mode=row)
      )
    )
    (2): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.015384615384615385, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.02307692307692308, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.03076923076923077, mode=row)
      )
    )
    (3): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(192, 192, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=192, bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(192, 8, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(8, 192, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.038461538461538464, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.04615384615384616, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.05384615384615385, mode=row)
      )
    )
    (4): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(288, 288, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=288, bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(288, 12, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(12, 288, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(288, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.06153846153846154, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.06923076923076923, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.07692307692307693, mode=row)
      )
      (3): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.08461538461538462, mode=row)
      )
      (4): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.09230769230769233, mode=row)
      )
    )
    (5): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=576, bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(24, 576, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(576, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.1, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.1076923076923077, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.11538461538461539, mode=row)
      )
      (3): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.12307692307692308, mode=row)
      )
      (4): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(816, 816, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.13076923076923078, mode=row)
      )
    )
    (6): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(816, 816, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(816, 34, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(34, 816, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(816, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.13846153846153847, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1392, bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.14615384615384616, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1392, bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.15384615384615385, mode=row)
      )
      (3): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1392, bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.16153846153846155, mode=row)
      )
      (4): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1392, bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.16923076923076924, mode=row)
      )
      (5): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1392, 1392, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1392, bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(1392, 232, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(232, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.17692307692307693, mode=row)
      )
    )
    (7): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(232, 1392, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1392, 1392, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1392, bias=False)
            (1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1392, 58, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(58, 1392, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(1392, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.18461538461538465, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(384, 2304, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(2304, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(2304, 2304, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2304, bias=False)
            (1): BatchNorm2d(2304, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(2304, 96, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(96, 2304, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(2304, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.19230769230769232, mode=row)
      )
    )
    (8): Conv2dNormActivation(
      (0): Conv2d(384, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): SiLU(inplace=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (classifier): Sequential(
    (0): Dropout(p=0.3, inplace=True)
    (1): Linear(in_features=1536, out_features=1000, bias=True)
  )
)[0m
[0mModel classifier architecture is Sequential(
  (0): Dropout(p=0.3, inplace=True)
  (1): Linear(in_features=1536, out_features=10, bias=True)
)[0m
[0mFeatures frozen on epoch 0[0m
[0m(0) parameter.requires_grad = False[0m
[0m(1) parameter.requires_grad = False[0m
[0m(2) parameter.requires_grad = False[0m
[0m(3) parameter.requires_grad = False[0m
[0m(4) parameter.requires_grad = False[0m
[0m(5) parameter.requires_grad = False[0m
[0m(6) parameter.requires_grad = False[0m
[0m(7) parameter.requires_grad = False[0m
[0m(8) parameter.requires_grad = False[0m
[0m(9) parameter.requires_grad = False[0m
[0m(10) parameter.requires_grad = False[0m
[0m(11) parameter.requires_grad = False[0m
[0m(12) parameter.requires_grad = False[0m
[0m(13) parameter.requires_grad = False[0m
[0m(14) parameter.requires_grad = False[0m
[0m(15) parameter.requires_grad = False[0m
[0m(16) parameter.requires_grad = False[0m
[0m(17) parameter.requires_grad = False[0m
[0m(18) parameter.requires_grad = False[0m
[0m(19) parameter.requires_grad = False[0m
[0m(20) parameter.requires_grad = False[0m
[0m(21) parameter.requires_grad = False[0m
[0m(22) parameter.requires_grad = False[0m
[0m(23) parameter.requires_grad = False[0m
[0m(24) parameter.requires_grad = False[0m
[0m(25) parameter.requires_grad = False[0m
[0m(26) parameter.requires_grad = False[0m
[0m(27) parameter.requires_grad = False[0m
[0m(28) parameter.requires_grad = False[0m
[0m(29) parameter.requires_grad = False[0m
[0m(30) parameter.requires_grad = False[0m
[0m(31) parameter.requires_grad = False[0m
[0m(32) parameter.requires_grad = False[0m
[0m(33) parameter.requires_grad = False[0m
[0m(34) parameter.requires_grad = False[0m
[0m(35) parameter.requires_grad = False[0m
[0m(36) parameter.requires_grad = False[0m
[0m(37) parameter.requires_grad = False[0m
[0m(38) parameter.requires_grad = False[0m
[0m(39) parameter.requires_grad = False[0m
[0m(40) parameter.requires_grad = False[0m
[0m(41) parameter.requires_grad = False[0m
[0m(42) parameter.requires_grad = False[0m
[0m(43) parameter.requires_grad = False[0m
[0m(44) parameter.requires_grad = False[0m
[0m(45) parameter.requires_grad = False[0m
[0m(46) parameter.requires_grad = False[0m
[0m(47) parameter.requires_grad = False[0m
[0m(48) parameter.requires_grad = False[0m
[0m(49) parameter.requires_grad = False[0m
[0m(50) parameter.requires_grad = False[0m
[0m(51) parameter.requires_grad = False[0m
[0m(52) parameter.requires_grad = False[0m
[0m(53) parameter.requires_grad = False[0m
[0m(54) parameter.requires_grad = False[0m
[0m(55) parameter.requires_grad = False[0m
[0m(56) parameter.requires_grad = False[0m
[0m(57) parameter.requires_grad = False[0m
[0m(58) parameter.requires_grad = False[0m
[0m(59) parameter.requires_grad = False[0m
[0m(60) parameter.requires_grad = False[0m
[0m(61) parameter.requires_grad = False[0m
[0m(62) parameter.requires_grad = False[0m
[0m(63) parameter.requires_grad = False[0m
[0m(64) parameter.requires_grad = False[0m
[0m(65) parameter.requires_grad = False[0m
[0m(66) parameter.requires_grad = False[0m
[0m(67) parameter.requires_grad = False[0m
[0m(68) parameter.requires_grad = False[0m
[0m(69) parameter.requires_grad = False[0m
[0m(70) parameter.requires_grad = False[0m
[0m(71) parameter.requires_grad = False[0m
[0m(72) parameter.requires_grad = False[0m
[0m(73) parameter.requires_grad = False[0m
[0m(74) parameter.requires_grad = False[0m
[0m(75) parameter.requires_grad = False[0m
[0m(76) parameter.requires_grad = False[0m
[0m(77) parameter.requires_grad = False[0m
[0m(78) parameter.requires_grad = False[0m
[0m(79) parameter.requires_grad = False[0m
[0m(80) parameter.requires_grad = False[0m
[0m(81) parameter.requires_grad = False[0m
[0m(82) parameter.requires_grad = False[0m
[0m(83) parameter.requires_grad = False[0m
[0m(84) parameter.requires_grad = False[0m
[0m(85) parameter.requires_grad = False[0m
[0m(86) parameter.requires_grad = False[0m
[0m(87) parameter.requires_grad = False[0m
[0m(88) parameter.requires_grad = False[0m
[0m(89) parameter.requires_grad = False[0m
[0m(90) parameter.requires_grad = False[0m
[0m(91) parameter.requires_grad = False[0m
[0m(92) parameter.requires_grad = False[0m
[0m(93) parameter.requires_grad = False[0m
[0m(94) parameter.requires_grad = False[0m
[0m(95) parameter.requires_grad = False[0m
[0m(96) parameter.requires_grad = False[0m
[0m(97) parameter.requires_grad = False[0m
[0m(98) parameter.requires_grad = False[0m
[0m(99) parameter.requires_grad = False[0m
[0m(100) parameter.requires_grad = False[0m
[0m(101) parameter.requires_grad = False[0m
[0m(102) parameter.requires_grad = False[0m
[0m(103) parameter.requires_grad = False[0m
[0m(104) parameter.requires_grad = False[0m
[0m(105) parameter.requires_grad = False[0m
[0m(106) parameter.requires_grad = False[0m
[0m(107) parameter.requires_grad = False[0m
[0m(108) parameter.requires_grad = False[0m
[0m(109) parameter.requires_grad = False[0m
[0m(110) parameter.requires_grad = False[0m
[0m(111) parameter.requires_grad = False[0m
[0m(112) parameter.requires_grad = False[0m
[0m(113) parameter.requires_grad = False[0m
[0m(114) parameter.requires_grad = False[0m
[0m(115) parameter.requires_grad = False[0m
[0m(116) parameter.requires_grad = False[0m
[0m(117) parameter.requires_grad = False[0m
[0m(118) parameter.requires_grad = False[0m
[0m(119) parameter.requires_grad = False[0m
[0m(120) parameter.requires_grad = False[0m
[0m(121) parameter.requires_grad = False[0m
[0m(122) parameter.requires_grad = False[0m
[0m(123) parameter.requires_grad = False[0m
[0m(124) parameter.requires_grad = False[0m
[0m(125) parameter.requires_grad = False[0m
[0m(126) parameter.requires_grad = False[0m
[0m(127) parameter.requires_grad = False[0m
[0m(128) parameter.requires_grad = False[0m
[0m(129) parameter.requires_grad = False[0m
[0m(130) parameter.requires_grad = False[0m
[0m(131) parameter.requires_grad = False[0m
[0m(132) parameter.requires_grad = False[0m
[0m(133) parameter.requires_grad = False[0m
[0m(134) parameter.requires_grad = False[0m
[0m(135) parameter.requires_grad = False[0m
[0m(136) parameter.requires_grad = False[0m
[0m(137) parameter.requires_grad = False[0m
[0m(138) parameter.requires_grad = False[0m
[0m(139) parameter.requires_grad = False[0m
[0m(140) parameter.requires_grad = False[0m
[0m(141) parameter.requires_grad = False[0m
[0m(142) parameter.requires_grad = False[0m
[0m(143) parameter.requires_grad = False[0m
[0m(144) parameter.requires_grad = False[0m
[0m(145) parameter.requires_grad = False[0m
[0m(146) parameter.requires_grad = False[0m
[0m(147) parameter.requires_grad = False[0m
[0m(148) parameter.requires_grad = False[0m
[0m(149) parameter.requires_grad = False[0m
[0m(150) parameter.requires_grad = False[0m
[0m(151) parameter.requires_grad = False[0m
[0m(152) parameter.requires_grad = False[0m
[0m(153) parameter.requires_grad = False[0m
[0m(154) parameter.requires_grad = False[0m
[0m(155) parameter.requires_grad = False[0m
[0m(156) parameter.requires_grad = False[0m
[0m(157) parameter.requires_grad = False[0m
[0m(158) parameter.requires_grad = False[0m
[0m(159) parameter.requires_grad = False[0m
[0m(160) parameter.requires_grad = False[0m
[0m(161) parameter.requires_grad = False[0m
[0m(162) parameter.requires_grad = False[0m
[0m(163) parameter.requires_grad = False[0m
[0m(164) parameter.requires_grad = False[0m
[0m(165) parameter.requires_grad = False[0m
[0m(166) parameter.requires_grad = False[0m
[0m(167) parameter.requires_grad = False[0m
[0m(168) parameter.requires_grad = False[0m
[0m(169) parameter.requires_grad = False[0m
[0m(170) parameter.requires_grad = False[0m
[0m(171) parameter.requires_grad = False[0m
[0m(172) parameter.requires_grad = False[0m
[0m(173) parameter.requires_grad = False[0m
[0m(174) parameter.requires_grad = False[0m
[0m(175) parameter.requires_grad = False[0m
[0m(176) parameter.requires_grad = False[0m
[0m(177) parameter.requires_grad = False[0m
[0m(178) parameter.requires_grad = False[0m
[0m(179) parameter.requires_grad = False[0m
[0m(180) parameter.requires_grad = False[0m
[0m(181) parameter.requires_grad = False[0m
[0m(182) parameter.requires_grad = False[0m
[0m(183) parameter.requires_grad = False[0m
[0m(184) parameter.requires_grad = False[0m
[0m(185) parameter.requires_grad = False[0m
[0m(186) parameter.requires_grad = False[0m
[0m(187) parameter.requires_grad = False[0m
[0m(188) parameter.requires_grad = False[0m
[0m(189) parameter.requires_grad = False[0m
[0m(190) parameter.requires_grad = False[0m
[0m(191) parameter.requires_grad = False[0m
[0m(192) parameter.requires_grad = False[0m
[0m(193) parameter.requires_grad = False[0m
[0m(194) parameter.requires_grad = False[0m
[0m(195) parameter.requires_grad = False[0m
[0m(196) parameter.requires_grad = False[0m
[0m(197) parameter.requires_grad = False[0m
[0m(198) parameter.requires_grad = False[0m
[0m(199) parameter.requires_grad = False[0m
[0m(200) parameter.requires_grad = False[0m
[0m(201) parameter.requires_grad = False[0m
[0m(202) parameter.requires_grad = False[0m
[0m(203) parameter.requires_grad = False[0m
[0m(204) parameter.requires_grad = False[0m
[0m(205) parameter.requires_grad = False[0m
[0m(206) parameter.requires_grad = False[0m
[0m(207) parameter.requires_grad = False[0m
[0m(208) parameter.requires_grad = False[0m
[0m(209) parameter.requires_grad = False[0m
[0m(210) parameter.requires_grad = False[0m
[0m(211) parameter.requires_grad = False[0m
[0m(212) parameter.requires_grad = False[0m
[0m(213) parameter.requires_grad = False[0m
[0m(214) parameter.requires_grad = False[0m
[0m(215) parameter.requires_grad = False[0m
[0m(216) parameter.requires_grad = False[0m
[0m(217) parameter.requires_grad = False[0m
[0m(218) parameter.requires_grad = False[0m
[0m(219) parameter.requires_grad = False[0m
[0m(220) parameter.requires_grad = False[0m
[0m(221) parameter.requires_grad = False[0m
[0m(222) parameter.requires_grad = False[0m
[0m(223) parameter.requires_grad = False[0m
[0m(224) parameter.requires_grad = False[0m
[0m(225) parameter.requires_grad = False[0m
[0m(226) parameter.requires_grad = False[0m
[0m(227) parameter.requires_grad = False[0m
[0m(228) parameter.requires_grad = False[0m
[0m(229) parameter.requires_grad = False[0m
[0m(230) parameter.requires_grad = False[0m
[0m(231) parameter.requires_grad = False[0m
[0m(232) parameter.requires_grad = False[0m
[0m(233) parameter.requires_grad = False[0m
[0m(234) parameter.requires_grad = False[0m
[0m(235) parameter.requires_grad = False[0m
[0m(236) parameter.requires_grad = False[0m
[0m(237) parameter.requires_grad = False[0m
[0m(238) parameter.requires_grad = False[0m
[0m(239) parameter.requires_grad = False[0m
[0m(240) parameter.requires_grad = False[0m
[0m(241) parameter.requires_grad = False[0m
[0m(242) parameter.requires_grad = False[0m
[0m(243) parameter.requires_grad = False[0m
[0m(244) parameter.requires_grad = False[0m
[0m(245) parameter.requires_grad = False[0m
[0m(246) parameter.requires_grad = False[0m
[0m(247) parameter.requires_grad = False[0m
[0m(248) parameter.requires_grad = False[0m
[0m(249) parameter.requires_grad = False[0m
[0m(250) parameter.requires_grad = False[0m
[0m(251) parameter.requires_grad = False[0m
[0m(252) parameter.requires_grad = False[0m
[0m(253) parameter.requires_grad = False[0m
[0m(254) parameter.requires_grad = False[0m
[0m(255) parameter.requires_grad = False[0m
[0m(256) parameter.requires_grad = False[0m
[0m(257) parameter.requires_grad = False[0m
[0m(258) parameter.requires_grad = False[0m
[0m(259) parameter.requires_grad = False[0m
[0m(260) parameter.requires_grad = False[0m
[0m(261) parameter.requires_grad = False[0m
[0m(262) parameter.requires_grad = False[0m
[0m(263) parameter.requires_grad = False[0m
[0m(264) parameter.requires_grad = False[0m
[0m(265) parameter.requires_grad = False[0m
[0m(266) parameter.requires_grad = False[0m
[0m(267) parameter.requires_grad = False[0m
[0m(268) parameter.requires_grad = False[0m
[0m(269) parameter.requires_grad = False[0m
[0m(270) parameter.requires_grad = False[0m
[0m(271) parameter.requires_grad = False[0m
[0m(272) parameter.requires_grad = False[0m
[0m(273) parameter.requires_grad = False[0m
[0m(274) parameter.requires_grad = False[0m
[0m(275) parameter.requires_grad = False[0m
[0m(276) parameter.requires_grad = False[0m
[0m(277) parameter.requires_grad = False[0m
[0m(278) parameter.requires_grad = False[0m
[0m(279) parameter.requires_grad = False[0m
[0m(280) parameter.requires_grad = False[0m
[0m(281) parameter.requires_grad = False[0m
[0m(282) parameter.requires_grad = False[0m
[0m(283) parameter.requires_grad = False[0m
[0m(284) parameter.requires_grad = False[0m
[0m(285) parameter.requires_grad = False[0m
[0m(286) parameter.requires_grad = False[0m
[0m(287) parameter.requires_grad = False[0m
[0m(288) parameter.requires_grad = False[0m
[0m(289) parameter.requires_grad = False[0m
[0m(290) parameter.requires_grad = False[0m
[0m(291) parameter.requires_grad = False[0m
[0m(292) parameter.requires_grad = False[0m
[0m(293) parameter.requires_grad = False[0m
[0m(294) parameter.requires_grad = False[0m
[0m(295) parameter.requires_grad = False[0m
[0m(296) parameter.requires_grad = False[0m
[0m(297) parameter.requires_grad = False[0m
[0m(298) parameter.requires_grad = False[0m
[0m(299) parameter.requires_grad = False[0m
[0m(300) parameter.requires_grad = False[0m
[0m(301) parameter.requires_grad = False[0m
[0m(302) parameter.requires_grad = False[0m
[0m(303) parameter.requires_grad = False[0m
[0m(304) parameter.requires_grad = False[0m
[0m(305) parameter.requires_grad = False[0m
[0m(306) parameter.requires_grad = False[0m
[0m(307) parameter.requires_grad = False[0m
[0m(308) parameter.requires_grad = False[0m
[0m(309) parameter.requires_grad = False[0m
[0m(310) parameter.requires_grad = False[0m
[0m(311) parameter.requires_grad = False[0m
[0m(312) parameter.requires_grad = False[0m
[0m(313) parameter.requires_grad = False[0m
[0m(314) parameter.requires_grad = False[0m
[0m(315) parameter.requires_grad = False[0m
[0m(316) parameter.requires_grad = False[0m
[0m(317) parameter.requires_grad = False[0m
[0m(318) parameter.requires_grad = False[0m
[0m(319) parameter.requires_grad = False[0m
[0m(320) parameter.requires_grad = False[0m
[0m(321) parameter.requires_grad = False[0m
[0m(322) parameter.requires_grad = False[0m
[0m(323) parameter.requires_grad = False[0m
[0m(324) parameter.requires_grad = False[0m
[0m(325) parameter.requires_grad = False[0m
[0m(326) parameter.requires_grad = False[0m
[0m(327) parameter.requires_grad = False[0m
[0m(328) parameter.requires_grad = False[0m
[0m(329) parameter.requires_grad = False[0m
[0m(330) parameter.requires_grad = False[0m
[0m(331) parameter.requires_grad = False[0m
[0m(332) parameter.requires_grad = False[0m
[0m(333) parameter.requires_grad = False[0m
[0m(334) parameter.requires_grad = False[0m
[0m(335) parameter.requires_grad = False[0m
[0m(336) parameter.requires_grad = False[0m
[0m(337) parameter.requires_grad = False[0m
[0m(338) parameter.requires_grad = True[0m
[0m(339) parameter.requires_grad = True[0m
[0mTraining: epoch=0 step=19/782 loss=2.27234 accuracy=14.53125 runtime_forward_ms=381.34406 runtime_backward_ms=8.81654.[0m
[0mTraining: epoch=0 step=39/782 loss=2.22183 accuracy=23.82812 runtime_forward_ms=310.15033 runtime_backward_ms=11.66344.[0m
[0mTraining: epoch=0 step=59/782 loss=2.17087 accuracy=31.48438 runtime_forward_ms=310.04247 runtime_backward_ms=11.26312.[0m
[0mTraining: epoch=0 step=79/782 loss=2.13115 accuracy=38.82812 runtime_forward_ms=310.10932 runtime_backward_ms=11.57381.[0m
[0mTraining: epoch=0 step=99/782 loss=2.07368 accuracy=47.65625 runtime_forward_ms=310.13025 runtime_backward_ms=11.29596.[0m
[0mTraining: epoch=0 step=119/782 loss=2.02657 accuracy=52.50000 runtime_forward_ms=310.07515 runtime_backward_ms=11.64311.[0m
[0mTraining: epoch=0 step=139/782 loss=1.99364 accuracy=54.29688 runtime_forward_ms=310.11957 runtime_backward_ms=11.50000.[0m
[0mTraining: epoch=0 step=159/782 loss=1.94335 accuracy=58.28125 runtime_forward_ms=310.12668 runtime_backward_ms=11.77244.[0m
[0mTraining: epoch=0 step=179/782 loss=1.89594 accuracy=62.50000 runtime_forward_ms=310.09475 runtime_backward_ms=11.48318.[0m
[0mTraining: epoch=0 step=199/782 loss=1.86778 accuracy=62.10938 runtime_forward_ms=310.05925 runtime_backward_ms=11.42630.[0m
[0mTraining: epoch=0 step=219/782 loss=1.83445 accuracy=63.04688 runtime_forward_ms=310.08562 runtime_backward_ms=11.38208.[0m
