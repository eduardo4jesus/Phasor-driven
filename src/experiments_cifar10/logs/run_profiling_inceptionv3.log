################ Profiling started at 20240129-061235 ################.
Provided parameters: profile(function=Conv2dRFFTFunction timestamp=20240129-061235 batch_size=16 profile_name=InceptionV3_CIFAR10_Conv2dRFFTFunction num_classes=10 skip_first=0 wait=4 warmup=4 active=4 repeat=1)
Original model architecture is Inception3(
  (Conv2d_1a_3x3): BasicConv2d(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2a_3x3): BasicConv2d(
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2b_3x3): BasicConv2d(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Conv2d_3b_1x1): BasicConv2d(
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_4a_3x3): BasicConv2d(
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Mixed_5b): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5c): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5d): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6a): InceptionB(
    (branch3x3): BasicConv2d(
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6b): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6c): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6d): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6e): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (AuxLogits): InceptionAux(
    (conv0): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv1): BasicConv2d(
      (conv): Conv2d(128, 768, kernel_size=(5, 5), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(768, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (fc): Linear(in_features=768, out_features=1000, bias=True)
  )
  (Mixed_7a): InceptionD(
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2): BasicConv2d(
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7b): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7c): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.5, inplace=False)
  (fc): Linear(in_features=2048, out_features=1000, bias=True)
)
Adopted model architecture is Inception3(
  (Conv2d_1a_3x3): BasicConv2d(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2a_3x3): BasicConv2d(
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2b_3x3): BasicConv2d(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Conv2d_3b_1x1): BasicConv2d(
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_4a_3x3): BasicConv2d(
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Mixed_5b): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5c): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5d): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6a): InceptionB(
    (branch3x3): BasicConv2d(
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6b): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6c): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6d): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6e): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (AuxLogits): InceptionAux(
    (conv0): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv1): BasicConv2d(
      (conv): Conv2d(128, 768, kernel_size=(5, 5), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(768, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (fc): Linear(in_features=768, out_features=1000, bias=True)
  )
  (Mixed_7a): InceptionD(
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2): BasicConv2d(
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7b): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7c): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.5, inplace=False)
  (fc): Linear(in_features=2048, out_features=10, bias=True)
)
(0) parameter.requires_grad = True
(1) parameter.requires_grad = True
(2) parameter.requires_grad = True
(3) parameter.requires_grad = True
(4) parameter.requires_grad = True
(5) parameter.requires_grad = True
(6) parameter.requires_grad = True
(7) parameter.requires_grad = True
(8) parameter.requires_grad = True
(9) parameter.requires_grad = True
(10) parameter.requires_grad = True
(11) parameter.requires_grad = True
(12) parameter.requires_grad = True
(13) parameter.requires_grad = True
(14) parameter.requires_grad = True
(15) parameter.requires_grad = True
(16) parameter.requires_grad = True
(17) parameter.requires_grad = True
(18) parameter.requires_grad = True
(19) parameter.requires_grad = True
(20) parameter.requires_grad = True
(21) parameter.requires_grad = True
(22) parameter.requires_grad = True
(23) parameter.requires_grad = True
(24) parameter.requires_grad = True
(25) parameter.requires_grad = True
(26) parameter.requires_grad = True
(27) parameter.requires_grad = True
(28) parameter.requires_grad = True
(29) parameter.requires_grad = True
(30) parameter.requires_grad = True
(31) parameter.requires_grad = True
(32) parameter.requires_grad = True
(33) parameter.requires_grad = True
(34) parameter.requires_grad = True
(35) parameter.requires_grad = True
(36) parameter.requires_grad = True
(37) parameter.requires_grad = True
(38) parameter.requires_grad = True
(39) parameter.requires_grad = True
(40) parameter.requires_grad = True
(41) parameter.requires_grad = True
(42) parameter.requires_grad = True
(43) parameter.requires_grad = True
(44) parameter.requires_grad = True
(45) parameter.requires_grad = True
(46) parameter.requires_grad = True
(47) parameter.requires_grad = True
(48) parameter.requires_grad = True
(49) parameter.requires_grad = True
(50) parameter.requires_grad = True
(51) parameter.requires_grad = True
(52) parameter.requires_grad = True
(53) parameter.requires_grad = True
(54) parameter.requires_grad = True
(55) parameter.requires_grad = True
(56) parameter.requires_grad = True
(57) parameter.requires_grad = True
(58) parameter.requires_grad = True
(59) parameter.requires_grad = True
(60) parameter.requires_grad = True
(61) parameter.requires_grad = True
(62) parameter.requires_grad = True
(63) parameter.requires_grad = True
(64) parameter.requires_grad = True
(65) parameter.requires_grad = True
(66) parameter.requires_grad = True
(67) parameter.requires_grad = True
(68) parameter.requires_grad = True
(69) parameter.requires_grad = True
(70) parameter.requires_grad = True
(71) parameter.requires_grad = True
(72) parameter.requires_grad = True
(73) parameter.requires_grad = True
(74) parameter.requires_grad = True
(75) parameter.requires_grad = True
(76) parameter.requires_grad = True
(77) parameter.requires_grad = True
(78) parameter.requires_grad = True
(79) parameter.requires_grad = True
(80) parameter.requires_grad = True
(81) parameter.requires_grad = True
(82) parameter.requires_grad = True
(83) parameter.requires_grad = True
(84) parameter.requires_grad = True
(85) parameter.requires_grad = True
(86) parameter.requires_grad = True
(87) parameter.requires_grad = True
(88) parameter.requires_grad = True
(89) parameter.requires_grad = True
(90) parameter.requires_grad = True
(91) parameter.requires_grad = True
(92) parameter.requires_grad = True
(93) parameter.requires_grad = True
(94) parameter.requires_grad = True
(95) parameter.requires_grad = True
(96) parameter.requires_grad = True
(97) parameter.requires_grad = True
(98) parameter.requires_grad = True
(99) parameter.requires_grad = True
(100) parameter.requires_grad = True
(101) parameter.requires_grad = True
(102) parameter.requires_grad = True
(103) parameter.requires_grad = True
(104) parameter.requires_grad = True
(105) parameter.requires_grad = True
(106) parameter.requires_grad = True
(107) parameter.requires_grad = True
(108) parameter.requires_grad = True
(109) parameter.requires_grad = True
(110) parameter.requires_grad = True
(111) parameter.requires_grad = True
(112) parameter.requires_grad = True
(113) parameter.requires_grad = True
(114) parameter.requires_grad = True
(115) parameter.requires_grad = True
(116) parameter.requires_grad = True
(117) parameter.requires_grad = True
(118) parameter.requires_grad = True
(119) parameter.requires_grad = True
(120) parameter.requires_grad = True
(121) parameter.requires_grad = True
(122) parameter.requires_grad = True
(123) parameter.requires_grad = True
(124) parameter.requires_grad = True
(125) parameter.requires_grad = True
(126) parameter.requires_grad = True
(127) parameter.requires_grad = True
(128) parameter.requires_grad = True
(129) parameter.requires_grad = True
(130) parameter.requires_grad = True
(131) parameter.requires_grad = True
(132) parameter.requires_grad = True
(133) parameter.requires_grad = True
(134) parameter.requires_grad = True
(135) parameter.requires_grad = True
(136) parameter.requires_grad = True
(137) parameter.requires_grad = True
(138) parameter.requires_grad = True
(139) parameter.requires_grad = True
(140) parameter.requires_grad = True
(141) parameter.requires_grad = True
(142) parameter.requires_grad = True
(143) parameter.requires_grad = True
(144) parameter.requires_grad = True
(145) parameter.requires_grad = True
(146) parameter.requires_grad = True
(147) parameter.requires_grad = True
(148) parameter.requires_grad = True
(149) parameter.requires_grad = True
(150) parameter.requires_grad = True
(151) parameter.requires_grad = True
(152) parameter.requires_grad = True
(153) parameter.requires_grad = True
(154) parameter.requires_grad = True
(155) parameter.requires_grad = True
(156) parameter.requires_grad = True
(157) parameter.requires_grad = True
(158) parameter.requires_grad = True
(159) parameter.requires_grad = True
(160) parameter.requires_grad = True
(161) parameter.requires_grad = True
(162) parameter.requires_grad = True
(163) parameter.requires_grad = True
(164) parameter.requires_grad = True
(165) parameter.requires_grad = True
(166) parameter.requires_grad = True
(167) parameter.requires_grad = True
(168) parameter.requires_grad = True
(169) parameter.requires_grad = True
(170) parameter.requires_grad = True
(171) parameter.requires_grad = True
(172) parameter.requires_grad = True
(173) parameter.requires_grad = True
(174) parameter.requires_grad = True
(175) parameter.requires_grad = True
(176) parameter.requires_grad = True
(177) parameter.requires_grad = True
(178) parameter.requires_grad = True
(179) parameter.requires_grad = True
(180) parameter.requires_grad = True
(181) parameter.requires_grad = True
(182) parameter.requires_grad = True
(183) parameter.requires_grad = True
(184) parameter.requires_grad = True
(185) parameter.requires_grad = True
(186) parameter.requires_grad = True
(187) parameter.requires_grad = True
(188) parameter.requires_grad = True
(189) parameter.requires_grad = True
(190) parameter.requires_grad = True
(191) parameter.requires_grad = True
(192) parameter.requires_grad = True
(193) parameter.requires_grad = True
(194) parameter.requires_grad = True
(195) parameter.requires_grad = True
(196) parameter.requires_grad = True
(197) parameter.requires_grad = True
(198) parameter.requires_grad = True
(199) parameter.requires_grad = True
(200) parameter.requires_grad = True
(201) parameter.requires_grad = True
(202) parameter.requires_grad = True
(203) parameter.requires_grad = True
(204) parameter.requires_grad = True
(205) parameter.requires_grad = True
(206) parameter.requires_grad = True
(207) parameter.requires_grad = True
(208) parameter.requires_grad = True
(209) parameter.requires_grad = True
(210) parameter.requires_grad = True
(211) parameter.requires_grad = True
(212) parameter.requires_grad = True
(213) parameter.requires_grad = True
(214) parameter.requires_grad = True
(215) parameter.requires_grad = True
(216) parameter.requires_grad = True
(217) parameter.requires_grad = True
(218) parameter.requires_grad = True
(219) parameter.requires_grad = True
(220) parameter.requires_grad = True
(221) parameter.requires_grad = True
(222) parameter.requires_grad = True
(223) parameter.requires_grad = True
(224) parameter.requires_grad = True
(225) parameter.requires_grad = True
(226) parameter.requires_grad = True
(227) parameter.requires_grad = True
(228) parameter.requires_grad = True
(229) parameter.requires_grad = True
(230) parameter.requires_grad = True
(231) parameter.requires_grad = True
(232) parameter.requires_grad = True
(233) parameter.requires_grad = True
(234) parameter.requires_grad = True
(235) parameter.requires_grad = True
(236) parameter.requires_grad = True
(237) parameter.requires_grad = True
(238) parameter.requires_grad = True
(239) parameter.requires_grad = True
(240) parameter.requires_grad = True
(241) parameter.requires_grad = True
(242) parameter.requires_grad = True
(243) parameter.requires_grad = True
(244) parameter.requires_grad = True
(245) parameter.requires_grad = True
(246) parameter.requires_grad = True
(247) parameter.requires_grad = True
(248) parameter.requires_grad = True
(249) parameter.requires_grad = True
(250) parameter.requires_grad = True
(251) parameter.requires_grad = True
(252) parameter.requires_grad = True
(253) parameter.requires_grad = True
(254) parameter.requires_grad = True
(255) parameter.requires_grad = True
(256) parameter.requires_grad = True
(257) parameter.requires_grad = True
(258) parameter.requires_grad = True
(259) parameter.requires_grad = True
(260) parameter.requires_grad = True
(261) parameter.requires_grad = True
(262) parameter.requires_grad = True
(263) parameter.requires_grad = True
(264) parameter.requires_grad = True
(265) parameter.requires_grad = True
(266) parameter.requires_grad = True
(267) parameter.requires_grad = True
(268) parameter.requires_grad = True
(269) parameter.requires_grad = True
(270) parameter.requires_grad = True
(271) parameter.requires_grad = True
(272) parameter.requires_grad = True
(273) parameter.requires_grad = True
(274) parameter.requires_grad = True
(275) parameter.requires_grad = True
(276) parameter.requires_grad = True
(277) parameter.requires_grad = True
(278) parameter.requires_grad = True
(279) parameter.requires_grad = True
(280) parameter.requires_grad = True
(281) parameter.requires_grad = True
(282) parameter.requires_grad = True
(283) parameter.requires_grad = True
(284) parameter.requires_grad = True
(285) parameter.requires_grad = True
(286) parameter.requires_grad = True
(287) parameter.requires_grad = True
(288) parameter.requires_grad = True
(289) parameter.requires_grad = True
(290) parameter.requires_grad = True
(291) parameter.requires_grad = True
Profiling Model InceptionV3_CIFAR10_Conv2dRFFTFunction.
################################################################################
Running Conv2dRFFTFunction step=0/12 (0.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
[W kineto_shim.cpp:337] Profiler is not initialized: skipping step() invocation
################################################################################
Running Conv2dRFFTFunction step=1/12 (8.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
[W kineto_shim.cpp:337] Profiler is not initialized: skipping step() invocation
################################################################################
Running Conv2dRFFTFunction step=2/12 (16.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
[W kineto_shim.cpp:337] Profiler is not initialized: skipping step() invocation
################################################################################
Running Conv2dRFFTFunction step=3/12 (25.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=4/12 (33.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=5/12 (41.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=6/12 (50.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=7/12 (58.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=8/12 (66.67%)
################################################################################
[W CPUAllocator.cpp:219] Memory block of unknown size was allocated before the profiling started, profiler results will not include the deallocation event
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=9/12 (75.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=10/12 (83.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTFunction step=11/12 (91.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Profile trace saved to /home/edreis/Code/eduardo4jesus/Phd-Research/paper2/src/experiments/.profiles/InceptionV3_CIFAR10_Conv2dRFFTFunction_date-20240129-061235.json.
Profile saved to /home/edreis/Code/eduardo4jesus/Phd-Research/paper2/src/experiments/.profiles/InceptionV3_CIFAR10_Conv2dRFFTFunction_date-20240129-061235.pt.
Provided parameters: profile(function=Conv2dRFFTPhasorFunction timestamp=20240129-061235 batch_size=16 profile_name=InceptionV3_CIFAR10_Conv2dRFFTPhasorFunction num_classes=10 skip_first=0 wait=4 warmup=4 active=4 repeat=1)
Original model architecture is Inception3(
  (Conv2d_1a_3x3): BasicConv2d(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2a_3x3): BasicConv2d(
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2b_3x3): BasicConv2d(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Conv2d_3b_1x1): BasicConv2d(
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_4a_3x3): BasicConv2d(
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Mixed_5b): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5c): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5d): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6a): InceptionB(
    (branch3x3): BasicConv2d(
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6b): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6c): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6d): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6e): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (AuxLogits): InceptionAux(
    (conv0): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv1): BasicConv2d(
      (conv): Conv2d(128, 768, kernel_size=(5, 5), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(768, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (fc): Linear(in_features=768, out_features=1000, bias=True)
  )
  (Mixed_7a): InceptionD(
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2): BasicConv2d(
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7b): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7c): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.5, inplace=False)
  (fc): Linear(in_features=2048, out_features=1000, bias=True)
)
Adopted model architecture is Inception3(
  (Conv2d_1a_3x3): BasicConv2d(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2a_3x3): BasicConv2d(
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2b_3x3): BasicConv2d(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Conv2d_3b_1x1): BasicConv2d(
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_4a_3x3): BasicConv2d(
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Mixed_5b): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5c): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5d): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6a): InceptionB(
    (branch3x3): BasicConv2d(
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6b): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6c): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6d): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6e): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (AuxLogits): InceptionAux(
    (conv0): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (conv1): BasicConv2d(
      (conv): Conv2d(128, 768, kernel_size=(5, 5), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(768, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (fc): Linear(in_features=768, out_features=1000, bias=True)
  )
  (Mixed_7a): InceptionD(
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2): BasicConv2d(
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7b): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7c): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.5, inplace=False)
  (fc): Linear(in_features=2048, out_features=10, bias=True)
)
(0) parameter.requires_grad = True
(1) parameter.requires_grad = True
(2) parameter.requires_grad = True
(3) parameter.requires_grad = True
(4) parameter.requires_grad = True
(5) parameter.requires_grad = True
(6) parameter.requires_grad = True
(7) parameter.requires_grad = True
(8) parameter.requires_grad = True
(9) parameter.requires_grad = True
(10) parameter.requires_grad = True
(11) parameter.requires_grad = True
(12) parameter.requires_grad = True
(13) parameter.requires_grad = True
(14) parameter.requires_grad = True
(15) parameter.requires_grad = True
(16) parameter.requires_grad = True
(17) parameter.requires_grad = True
(18) parameter.requires_grad = True
(19) parameter.requires_grad = True
(20) parameter.requires_grad = True
(21) parameter.requires_grad = True
(22) parameter.requires_grad = True
(23) parameter.requires_grad = True
(24) parameter.requires_grad = True
(25) parameter.requires_grad = True
(26) parameter.requires_grad = True
(27) parameter.requires_grad = True
(28) parameter.requires_grad = True
(29) parameter.requires_grad = True
(30) parameter.requires_grad = True
(31) parameter.requires_grad = True
(32) parameter.requires_grad = True
(33) parameter.requires_grad = True
(34) parameter.requires_grad = True
(35) parameter.requires_grad = True
(36) parameter.requires_grad = True
(37) parameter.requires_grad = True
(38) parameter.requires_grad = True
(39) parameter.requires_grad = True
(40) parameter.requires_grad = True
(41) parameter.requires_grad = True
(42) parameter.requires_grad = True
(43) parameter.requires_grad = True
(44) parameter.requires_grad = True
(45) parameter.requires_grad = True
(46) parameter.requires_grad = True
(47) parameter.requires_grad = True
(48) parameter.requires_grad = True
(49) parameter.requires_grad = True
(50) parameter.requires_grad = True
(51) parameter.requires_grad = True
(52) parameter.requires_grad = True
(53) parameter.requires_grad = True
(54) parameter.requires_grad = True
(55) parameter.requires_grad = True
(56) parameter.requires_grad = True
(57) parameter.requires_grad = True
(58) parameter.requires_grad = True
(59) parameter.requires_grad = True
(60) parameter.requires_grad = True
(61) parameter.requires_grad = True
(62) parameter.requires_grad = True
(63) parameter.requires_grad = True
(64) parameter.requires_grad = True
(65) parameter.requires_grad = True
(66) parameter.requires_grad = True
(67) parameter.requires_grad = True
(68) parameter.requires_grad = True
(69) parameter.requires_grad = True
(70) parameter.requires_grad = True
(71) parameter.requires_grad = True
(72) parameter.requires_grad = True
(73) parameter.requires_grad = True
(74) parameter.requires_grad = True
(75) parameter.requires_grad = True
(76) parameter.requires_grad = True
(77) parameter.requires_grad = True
(78) parameter.requires_grad = True
(79) parameter.requires_grad = True
(80) parameter.requires_grad = True
(81) parameter.requires_grad = True
(82) parameter.requires_grad = True
(83) parameter.requires_grad = True
(84) parameter.requires_grad = True
(85) parameter.requires_grad = True
(86) parameter.requires_grad = True
(87) parameter.requires_grad = True
(88) parameter.requires_grad = True
(89) parameter.requires_grad = True
(90) parameter.requires_grad = True
(91) parameter.requires_grad = True
(92) parameter.requires_grad = True
(93) parameter.requires_grad = True
(94) parameter.requires_grad = True
(95) parameter.requires_grad = True
(96) parameter.requires_grad = True
(97) parameter.requires_grad = True
(98) parameter.requires_grad = True
(99) parameter.requires_grad = True
(100) parameter.requires_grad = True
(101) parameter.requires_grad = True
(102) parameter.requires_grad = True
(103) parameter.requires_grad = True
(104) parameter.requires_grad = True
(105) parameter.requires_grad = True
(106) parameter.requires_grad = True
(107) parameter.requires_grad = True
(108) parameter.requires_grad = True
(109) parameter.requires_grad = True
(110) parameter.requires_grad = True
(111) parameter.requires_grad = True
(112) parameter.requires_grad = True
(113) parameter.requires_grad = True
(114) parameter.requires_grad = True
(115) parameter.requires_grad = True
(116) parameter.requires_grad = True
(117) parameter.requires_grad = True
(118) parameter.requires_grad = True
(119) parameter.requires_grad = True
(120) parameter.requires_grad = True
(121) parameter.requires_grad = True
(122) parameter.requires_grad = True
(123) parameter.requires_grad = True
(124) parameter.requires_grad = True
(125) parameter.requires_grad = True
(126) parameter.requires_grad = True
(127) parameter.requires_grad = True
(128) parameter.requires_grad = True
(129) parameter.requires_grad = True
(130) parameter.requires_grad = True
(131) parameter.requires_grad = True
(132) parameter.requires_grad = True
(133) parameter.requires_grad = True
(134) parameter.requires_grad = True
(135) parameter.requires_grad = True
(136) parameter.requires_grad = True
(137) parameter.requires_grad = True
(138) parameter.requires_grad = True
(139) parameter.requires_grad = True
(140) parameter.requires_grad = True
(141) parameter.requires_grad = True
(142) parameter.requires_grad = True
(143) parameter.requires_grad = True
(144) parameter.requires_grad = True
(145) parameter.requires_grad = True
(146) parameter.requires_grad = True
(147) parameter.requires_grad = True
(148) parameter.requires_grad = True
(149) parameter.requires_grad = True
(150) parameter.requires_grad = True
(151) parameter.requires_grad = True
(152) parameter.requires_grad = True
(153) parameter.requires_grad = True
(154) parameter.requires_grad = True
(155) parameter.requires_grad = True
(156) parameter.requires_grad = True
(157) parameter.requires_grad = True
(158) parameter.requires_grad = True
(159) parameter.requires_grad = True
(160) parameter.requires_grad = True
(161) parameter.requires_grad = True
(162) parameter.requires_grad = True
(163) parameter.requires_grad = True
(164) parameter.requires_grad = True
(165) parameter.requires_grad = True
(166) parameter.requires_grad = True
(167) parameter.requires_grad = True
(168) parameter.requires_grad = True
(169) parameter.requires_grad = True
(170) parameter.requires_grad = True
(171) parameter.requires_grad = True
(172) parameter.requires_grad = True
(173) parameter.requires_grad = True
(174) parameter.requires_grad = True
(175) parameter.requires_grad = True
(176) parameter.requires_grad = True
(177) parameter.requires_grad = True
(178) parameter.requires_grad = True
(179) parameter.requires_grad = True
(180) parameter.requires_grad = True
(181) parameter.requires_grad = True
(182) parameter.requires_grad = True
(183) parameter.requires_grad = True
(184) parameter.requires_grad = True
(185) parameter.requires_grad = True
(186) parameter.requires_grad = True
(187) parameter.requires_grad = True
(188) parameter.requires_grad = True
(189) parameter.requires_grad = True
(190) parameter.requires_grad = True
(191) parameter.requires_grad = True
(192) parameter.requires_grad = True
(193) parameter.requires_grad = True
(194) parameter.requires_grad = True
(195) parameter.requires_grad = True
(196) parameter.requires_grad = True
(197) parameter.requires_grad = True
(198) parameter.requires_grad = True
(199) parameter.requires_grad = True
(200) parameter.requires_grad = True
(201) parameter.requires_grad = True
(202) parameter.requires_grad = True
(203) parameter.requires_grad = True
(204) parameter.requires_grad = True
(205) parameter.requires_grad = True
(206) parameter.requires_grad = True
(207) parameter.requires_grad = True
(208) parameter.requires_grad = True
(209) parameter.requires_grad = True
(210) parameter.requires_grad = True
(211) parameter.requires_grad = True
(212) parameter.requires_grad = True
(213) parameter.requires_grad = True
(214) parameter.requires_grad = True
(215) parameter.requires_grad = True
(216) parameter.requires_grad = True
(217) parameter.requires_grad = True
(218) parameter.requires_grad = True
(219) parameter.requires_grad = True
(220) parameter.requires_grad = True
(221) parameter.requires_grad = True
(222) parameter.requires_grad = True
(223) parameter.requires_grad = True
(224) parameter.requires_grad = True
(225) parameter.requires_grad = True
(226) parameter.requires_grad = True
(227) parameter.requires_grad = True
(228) parameter.requires_grad = True
(229) parameter.requires_grad = True
(230) parameter.requires_grad = True
(231) parameter.requires_grad = True
(232) parameter.requires_grad = True
(233) parameter.requires_grad = True
(234) parameter.requires_grad = True
(235) parameter.requires_grad = True
(236) parameter.requires_grad = True
(237) parameter.requires_grad = True
(238) parameter.requires_grad = True
(239) parameter.requires_grad = True
(240) parameter.requires_grad = True
(241) parameter.requires_grad = True
(242) parameter.requires_grad = True
(243) parameter.requires_grad = True
(244) parameter.requires_grad = True
(245) parameter.requires_grad = True
(246) parameter.requires_grad = True
(247) parameter.requires_grad = True
(248) parameter.requires_grad = True
(249) parameter.requires_grad = True
(250) parameter.requires_grad = True
(251) parameter.requires_grad = True
(252) parameter.requires_grad = True
(253) parameter.requires_grad = True
(254) parameter.requires_grad = True
(255) parameter.requires_grad = True
(256) parameter.requires_grad = True
(257) parameter.requires_grad = True
(258) parameter.requires_grad = True
(259) parameter.requires_grad = True
(260) parameter.requires_grad = True
(261) parameter.requires_grad = True
(262) parameter.requires_grad = True
(263) parameter.requires_grad = True
(264) parameter.requires_grad = True
(265) parameter.requires_grad = True
(266) parameter.requires_grad = True
(267) parameter.requires_grad = True
(268) parameter.requires_grad = True
(269) parameter.requires_grad = True
(270) parameter.requires_grad = True
(271) parameter.requires_grad = True
(272) parameter.requires_grad = True
(273) parameter.requires_grad = True
(274) parameter.requires_grad = True
(275) parameter.requires_grad = True
(276) parameter.requires_grad = True
(277) parameter.requires_grad = True
(278) parameter.requires_grad = True
(279) parameter.requires_grad = True
(280) parameter.requires_grad = True
(281) parameter.requires_grad = True
(282) parameter.requires_grad = True
(283) parameter.requires_grad = True
(284) parameter.requires_grad = True
(285) parameter.requires_grad = True
(286) parameter.requires_grad = True
(287) parameter.requires_grad = True
(288) parameter.requires_grad = True
(289) parameter.requires_grad = True
(290) parameter.requires_grad = True
(291) parameter.requires_grad = True
Profiling Model InceptionV3_CIFAR10_Conv2dRFFTPhasorFunction.
################################################################################
Running Conv2dRFFTPhasorFunction step=0/12 (0.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=1/12 (8.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=2/12 (16.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=3/12 (25.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=4/12 (33.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=5/12 (41.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=6/12 (50.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=7/12 (58.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=8/12 (66.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=9/12 (75.00%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=10/12 (83.33%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Running Conv2dRFFTPhasorFunction step=11/12 (91.67%)
################################################################################
Applying built-in conv2d(input_shape=torch.Size([16, 3, 299, 299]) weights_shape=torch.Size([32, 3, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 149, 149]) weights_shape=torch.Size([32, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 32, 147, 147]) weights_shape=torch.Size([64, 32, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 73, 73]) weights_shape=torch.Size([80, 64, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 80, 73, 73]) weights_shape=torch.Size([192, 80, 3, 3]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([48, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([64, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 192, 35, 35]) weights_shape=torch.Size([32, 192, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([48, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 256, 35, 35]) weights_shape=torch.Size([64, 256, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([48, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 48, 35, 35]) weights_shape=torch.Size([64, 48, 5, 5]) bias_shape=None stride=(1, 1) padding=(2, 2) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([384, 288, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 288, 35, 35]) weights_shape=torch.Size([64, 288, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 64, 35, 35]) weights_shape=torch.Size([96, 64, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 96, 35, 35]) weights_shape=torch.Size([96, 96, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([128, 128, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 128, 17, 17]) weights_shape=torch.Size([192, 128, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([160, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([160, 160, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 160, 17, 17]) weights_shape=torch.Size([192, 160, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 5, 5]) weights_shape=torch.Size([128, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 128, 5, 5]) weights_shape=torch.Size([768, 128, 5, 5]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([320, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 768, 17, 17]) weights_shape=torch.Size([192, 768, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 1, 7]) bias_shape=None stride=(1, 1) padding=(0, 3) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 7, 1]) bias_shape=None stride=(1, 1) padding=(3, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 192, 17, 17]) weights_shape=torch.Size([192, 192, 3, 3]) bias_shape=None stride=(2, 2) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([320, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([384, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([448, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 1280, 8, 8]) weights_shape=torch.Size([192, 1280, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([320, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([384, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([448, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 448, 8, 8]) weights_shape=torch.Size([384, 448, 3, 3]) bias_shape=None stride=(1, 1) padding=(1, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 1, 3]) bias_shape=None stride=(1, 1) padding=(0, 1) dilation=(1, 1) groups=1)
Applying built-in conv2d(input_shape=torch.Size([16, 384, 8, 8]) weights_shape=torch.Size([384, 384, 3, 1]) bias_shape=None stride=(1, 1) padding=(1, 0) dilation=(1, 1) groups=1)
Applying Conv2dRFFTPhasorFunction(input_shape=torch.Size([16, 2048, 8, 8]) weights_shape=torch.Size([192, 2048, 1, 1]) bias_shape=None stride=(1, 1) padding=(0, 0) dilation=(1, 1) groups=1)
################################################################################
Profile trace saved to /home/edreis/Code/eduardo4jesus/Phd-Research/paper2/src/experiments/.profiles/InceptionV3_CIFAR10_Conv2dRFFTPhasorFunction_date-20240129-061235.json.
Profile saved to /home/edreis/Code/eduardo4jesus/Phd-Research/paper2/src/experiments/.profiles/InceptionV3_CIFAR10_Conv2dRFFTPhasorFunction_date-20240129-061235.pt.
################ Profiling ended at 20240129-062118 ################.
